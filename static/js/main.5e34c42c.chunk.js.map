{"version":3,"sources":["Components/Hero.jsx","Components/Title.jsx","Components/Subtitle.jsx","Components/MovementInput.jsx","Components/Result.jsx","Components/FormInput.jsx","Components/Logo.jsx","App.js","serviceWorker.js","index.js","powerlifting_navarra-black.svg"],"names":["Hero","props","className","children","Title","title","Subtitle","subtitle","MovementInput","label","id","type","placeholder","value","onChange","setValue","wilksCalculator","require","Result","squat","benchPress","deadLift","bodyWeight","liftedWeight","parseFloat","wilks","calculateWilksScore","Math","round","calculateResult","FormInput","state","handleChange","bind","handleSubmit","event","this","setState","target","alert","preventDefault","onSubmit","React","Component","Logo","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5e34c42c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Hero = props => (\n    <section className=\"hero is-fullheight is-light is-bold\">\n        <div className=\"hero-body \">\n            <div className=\"container has-text-centered\">\n                {props.children}\n            </div>\n        </div>\n    </section>\n);\n\nexport default Hero;","import React from \"react\";\n\nconst Title = props => (\n    <h1 className=\"title\">\n        {props.title}\n    </h1>\n);\n\nexport default Title;","import React from \"react\";\n\nconst Subtitle = props => (\n        <h2 className=\"subtitle\">\n            {props.subtitle}\n        </h2>\n);\n\nexport default Subtitle;","import React from \"react\";\n\nconst MovementInput = props => (\n    <div className=\"columns is-mobile\">\n        <div className=\"column is-half is-offset-one-quarter\">\n            <div className=\"field\">\n                <label className=\"label\">{props.label}</label>\n                <div className=\"control has-text-dark\">\n                    <input id={props.id} className=\"input is-primary\" type=\"number\" placeholder={props.label} value={props.value} onChange={props.setValue}/>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default MovementInput;","import React from \"react\";\nconst wilksCalculator = require('wilks-calculator');\n\nfunction calculateResult(squat, benchPress, deadLift, bodyWeight) {\n    const liftedWeight = parseFloat(squat) + parseFloat(benchPress) + parseFloat(deadLift);\n\n    if (liftedWeight <= 0 || bodyWeight <= 0)  {\n        return 0;\n    }\n\n    let wilks = wilksCalculator.calculateWilksScore('m', parseFloat(bodyWeight), liftedWeight);\n\n    return Math.round(wilks * 100) / 100;\n}\n\nconst Result = ({squat, benchPress, deadLift, bodyWeight}) => (\n    <p className=\"content is-size-1\">\n        {calculateResult(squat, benchPress, deadLift, bodyWeight)} wilks points\n    </p>\n);\n\nexport default Result;","import React from \"react\";\nimport MovementInput from \"./MovementInput\";\nimport Result from \"./Result\";\n\nclass FormInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squat: 0,\n            benchPress: 0,\n            deadLift: 0,\n            bodyWeight: 0\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.id]: event.target.value });\n    }\n\n    handleSubmit(event) {\n        alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <MovementInput id=\"squat\" label=\"Squat\"  value={this.state.squat} setValue={this.handleChange}/>\n                    <MovementInput id=\"benchPress\" label=\"Bench Press\" value={this.state.benchPress} setValue={this.handleChange}/>\n                    <MovementInput id=\"deadLift\" label=\"Deadlift\" value={this.state.deadLift} setValue={this.handleChange}/>\n                    <MovementInput id=\"bodyWeight\" label=\"Body Weight\" value={this.state.bodyWeight} setValue={this.handleChange}/>\n                </form>\n                <Result squat={this.state.squat} benchPress={this.state.benchPress} deadLift={this.state.deadLift} bodyWeight={this.state.bodyWeight}/>\n            </div>\n        );\n    }\n}\n\nexport default FormInput;","import React from \"react\";\nimport logo from '../powerlifting_navarra-black.svg';\n\nconst Logo = () => (\n            <figure className=\"image container is-128x128\">\n                <img src={logo} alt=\"logo\"/>\n            </figure>\n);\n\nexport default Logo;","import React from 'react';\nimport './App.sass';\nimport Hero from \"./Components/Hero\";\nimport Title from \"./Components/Title\";\nimport Subtitle from \"./Components/Subtitle\";\nimport FormInput from \"./Components/FormInput\";\nimport Logo from \"./Components/Logo\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Hero>\n                    <Logo/>\n                    <Title title=\"Wilks Calculator (kg)\"/>\n                    <Subtitle subtitle=\"Calculate your Wilks\"/>\n                <FormInput/>\n            </Hero>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/powerlifting_navarra-black.7df7095b.svg\";"],"sourceRoot":""}